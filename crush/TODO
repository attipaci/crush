>> Change combination Frame flags to method calls...

>> Conditions based on environment vars and java properties
	env.[KEY] or env.[!KEY] or env.[KEY?value]
	property.[PROPERTY?value] 

>> command-line options is master mode
	unlock
	<option>
	lock

>> HAWC+
	DIAGMODE='INT_CAL'
	DIAG_HZ, INTCALV
	intcal reductions

>> gain normalization on select group only:
   e.g. array.normgroup bias-12

>> gain flagging on different division...
   e.g. array.gainrange.div=subarray

>> bias-gain model:

	gain.refindex 12
	gain.refbias 9065
	gain.exponent -1.5
	gain.refvalue 1.0
	
>> Edit suggestions for editing 'wrapper.sh'





>> Pointing

	Scan.getPoiuntingString to use PointingData table
	(this way pointing values are calculated once only)

>> Native frames

	HorizontalFrame -> SkyFrame<CoordinateType>

	HorizontalFrame 
		extends SkyFrame<HorizontalCoordinates> implements GroundBased

>> Fits:

	HDUDataReader<T extends BasicHDU> {
		void readData(ArrayDataInput in);
	}

	--> ImageDataReader extends HDUDataReader<ImageHDU>
	--> AsciiTableDataReader extends HDUDataReader<AsciiTableHDU>
	--> BinaryTableDataReader extends HDUDataReader<BinaryTableHDU> {
		void readFixedTableData(ArrayDataInput in);
		void readHeapData(ArrayDataInput in);
	    }
	--> final DefaultImageDataReader() or ImageHDU.getDefaultDataReader()

	Fits.setImageDataReader(ImageDataReader r)
	Fits.setAsciiTableDataReader(AsciiTableReader r)
	Firs.setBinaryTableDataReader(BinaryTableReader r)



	


>> CovarianceMatrix object
   -- based on SquareMatrix<DataPoint>
      (so can do, e.g. SVD)
   -- write as Data2D
   -- add BinaryTableHDU for pixel assignment

>> Write spectra as FITS... (write.spectrum.fits or write.spectrum=fits/ascii)

!! SCUBA-2: incorporate dark SQUID data...



>> Pointing native & focalplane

>> Projector2D -> Projected2D, AstroPojector -> CelestialOffset???

>> proper projection/deprojection of offsets... (Projected2D...)

>> Frame -> Frame<NativeCoordinateType>
   Scan -> Scan<NativeCoordinateType>
   horizontal -> native

>> better way to plug APEX scan resource leaks...

>> eliminate channel/frame temp fields

>> Laboca He3 temperature reporting (blinds)



>> GLOSSARY-2-html:

 * each option to have a separate page, or all on one page?
 * class ids by label, instrument, user-level so they can be hidden on demand.
 * div for selectors (instrument, telescope, user-level)
 * summary page (1-liners using @Brief tag)
 * 'internal references to known labels in '' (references also classed)
 
>> README-2-html:
 * Interpret sectioning, identation


>> -poll=option

   To list all conditional setting for option* also...

>> SOFIA log quantities
>> test photometry!
>> history to crushtools
>> processing history to imagetool and Data2D and subclasses...


>> "force." command to override date-, serial-, object-type conditional 
   settings
   E.g. -force.tau.225GHz=0.223 

>> Upstream photometry architecture, common for all instruments.
     - PhaseSet > PhaseGroup > PhaseData
     - PhaseGroup.getValue(Channel c)
     - Weighting/Despiking move to PhaseSet

>> Surgical blacklisting...
   blacklist specific values: E.g. 
	blacklist=estimator:median
   whitelist via 
	whitelist=estimator:*
   or	
	whitelist=estimator:median	

>> Switch to standard FITS long keys (after updating FITS libs)
	-- Retain the ability to read crush-style long keys through Util...

>> Messages redesign:
	* owner, sender, type, importance, message, details... 
	* message server.
	--> to console (always)
	--> To message client (if connected)
	    (client [e.g. graphical] can launch crush, and connect to its
	    message server)
	--> timestamps (sorting Comparable)
	--> GUI mode?

>> track progress
	? through message server
	? other server, with data products?

>> data product server
	? poll/send data products
	--> to display
	--> summary information


>> 'waveplate.accuracy' --> add to angles error...

>> formatter access to configuration
	{%key} --> configuration key
	%key --> formatting value
	escape % 

>> Formatting multiples. E.g.: 
	src.peak*1000.0(f3)
	src.peak/1000.0(e2)	

>> catalog.format

>> Shadow scans
		
