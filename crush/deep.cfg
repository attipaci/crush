# Load the faint settings first. Deep overriders are for sources that
# are too faint even to detect in single scans.
config faint.cfg

# Go extra long for deep cleaning...
#rounds 10

# If you want to produce a scrambled map for noise analysis of the map
# without sources (which are intentionally smeared out) then uncomment
# the following line.
#scrambled

# Do not use clipping or blanking for deep reductions
blacklist clip,blank

# Despike the scan maps. Only useful if source(s) cannot be seen in single
# scans!!!
source.despike 10.0

# Do more despiking
despike.level 10.0
iteration.[2] despike.level 8.0
#iteration.[3] despike.level 6.0

# Starting later, also look for unmodeled features (in a second despiking 
# round), up to the 1/f filtering timescale (see 'drifts').
# Careful, if the pixel spectra are not exactly white, then some level of 
# correlation is always expected, which may 'confuse' this despiking function.
# Therefore, it is best to set the S/N level loosely...
#iteration.[5] despike2.level 10.0
#iteration.[7] despike2.level 8.0
#iteration.[9] despike2.level 6.0

# Do not solve for source until the last iteration
forget source
iteration.[last] recall source
iteration.[last] exposureclip 0.3 

# Given the faint nature of deep-field sources, do not attempt to determine
# the channel couplings
forget source.coupling

# Given that source mapping is done only once, there is no point of using
# memory extensive map index lookups.
forget indexing

# When filtering extended structures (only applicable in 'faint' or  'deep'
# mode when sourceSize is also specified!) what type of filter to use. 
# 'FFT' or 'convolution'.
source.filter
source.filter.fwhm auto
source.filter.type convolution
source.filter.blank 6.0
[extended] forget source.filter

# Because of the filtering there isn't much need for gradients...
forget correlated.sky-gradients

# Always smooth by the beam (i.e. optimally filter for point sources) in
# 'deep' mode.  
smooth beam 
iteration.[last] smooth beam

# Weighting of scan based on the RMS of the maps they produce. For 'extended'
# mode reductions use robust estimates for determining the map noise...
weighting.scans
weighting.scans.method rms
[extended] weighting.scans.method robust

# Start whitening in the 4th iteration...
iteration.[4] whiten
