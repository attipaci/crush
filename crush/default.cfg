# Set the spherical projection to use.
# The following projections are currently supported:
#   
# 	SIN -- Slant Orthographic
#	TAN -- Gnomonic
#	SFL -- Sanson-Flamsteed
#	GLS -- Globial Sinusoidal (old SFL, aka Radio projection)
#	ZEA -- Zenithal Equal Area
#	MER -- Mercator
#	CAR -- Plate-Carree
#	AIT -- Hammer-Aitoff
#
# The default is GLS, which is widely used, and is the fastest to calculate...
projection GLS

# The ordering of models in the default reduction pipeline. 
ordering offsets, drifts, correlated.obs-channels, weighting.frames, whiten, weighting, despike, despike2, despike3, correlated.gradients, correlated.accel, source

# In case an outputput name was set before loading default.cfg, clear it
forget name

# Turn this option on if you want to see intermediate maps as the reduction
# progresses. These are (over-)written to 'intermediate.fits'.
#source.intermediates 

# The default 1/f stabilty time scale. Instruments should define their own.
stability 15.0
[extended] stability 30.0

# Determine the velocity clipping based on stability and beam size...
vclip auto

# The maximum fraction of samples which can be out-of-range before the channel
# is flagged for being unusable.
range.flagfraction 0.05

# Downsample data as needed...
downsample auto

# Signal estimators to use ('median' or 'maximum-likelihood').
estimator median
iteration.[2] estimator maximum-likelihood

# Solve for pixels gains (with specified estimator type)
gains
gains.estimator maximum-likelihood

# Whether to measure responses to signals. If the option is set, 
# the responses are printed in curly brackets during reduction. The
# values represent the normalized covariance of residuals to
# the given signals. By default response calculation is disabled
# to speed up reduction. It is mainly useful for designing
# instrument pipelines, whereas it is only informational once
# the pipelines are established.
#signal-response

# Enable filtering (components need to be enabled separately).
filter

# Define how FFT filters are to be compounded
filter.ordering motion, kill, whiten

# Set 'whiten' as an alias to 'filter.whiten' for backward compatibility
alias.whiten filter.whiten

# Define the shorthand 'motion' for 'filter.motion'
alias.motion filter.motion

# Remove the scan synchronous signals, e.g. telescope vibrations.
#filter.motion
filter.motion.range 0.01--1.0
filter.motion.s2n 6.0
filter.motion.above 0.1
[extended] forget filter.motion
#[filter.motion] forget whiten.below

# Shorthand 'kill' for 'filter.kill'
alias.kill filter.kill

# A frequency quenching filter can be enabled when needed, with all frequencies
# in the specified bands being eliminated from the timestream data...
#filter.kill
#filter.kill.bands 10.1--10.2, 12.35--12.37


# Derive pixel weights (via 'rms', 'differential' or 'robust' method).
weighting
weighting.method rms
[extended] weighting.method differential

# Specify the range of acceptable pixel noise rel. to the median pixel noise
# Channels outside of this admissible range will be flagged.
#weighting.noiserange 0.3--10.0
[extended] weighting.noiserange 0.1--30

# Time weighting (optionally with time-resolution in seconds or 'auto').
# Time weighting should be used with caution. It can lead to unstable solutions
# especially when there is bright/extended emission. Therefore it should be
# used with the longest possible time-scale, or not at all...
#weighting.frames
[extended] forget weighting.frames

# Set the time window (seconds) for weighting frames, or 'auto'.
weighting.frames.resolution auto

# Specify an acceptable range for time-weights. Frames with weights outside
# this range will be flagged.
weighting.frames.noiserange 0.3--3.0

# Solve for source!!!
source
source.type map

# Some aliases for easy selection of source types
[map] source.type map
[beammap] source.type beammap
[skydip] source.type skydip

# If beam mapping, then reduce in horizontal
[source.type?beammap] system horizontal

# Simplify pipeline for skydips...
[source.type?skydip] blacklist drifts,offsets,whiten,source.nefd,aclip,vclip
[source.type?skydip] estimator median

# If inserting test sources into the data, use static source gains
[sources] source.fixedgains

# For chopped observations disable velocity and acceleration clipping and 
# downsampling
[chopped] forget vclip, aclip, downsample

# Require a minimum number of good pixels for mapping as a fraction of the
# nominal pixel count on the array. Note, you can also set this as a number
# by using the option 'mappingpixels' instead...
mappingfraction 0.67

# Determine the relative coupling (i.e. relative beam efficiency)
# for each channel, based on the response to the bright (i.e. blanked)
# areas of the source map.
# EXPERIMENTAL feature! Use with caution... 
#source.coupling

# Define the acceptable dynamic range for the source coupling of channels
# When the estimated coupling falls outside of this range, the default 
# value of 1.0 is assumed.
source.coupling.range 0.3:3.0

# By default source gains are dynamically calculated from the sky-noise gains.
# To override this, and to use fixed gains (e.g. from RCP files), uncomment
# the line below (or specify it on the command line).
#source.fixedgains

# Use MEM correction on the source map?
#source.MEM
[extended] forget source.MEM
iteration.[last] forget source.MEM

# Set the 'desirability' of MEM solution (0 -- 1)
source.MEM.lambda 0.1

# Calculate coupling efficiencies suign information from RCP files 
# (when defined).
rcp.gains

# Define 'array' as a shorthand for 'correlated.obs-channels'
alias.array correlated.obs-channels
# Always decorrelate observing channels.
array
array.gainrange 0.1:10.0
[extended] correlated.*.gainrange 0.01:100

# Define 'gradients' as a shorthand for 'correlated.gradients'
alias.gradients correlated.gradients
# Do not solve for gradients for extended sources
#gradients
[extended] forget gradients

# Define 'accel' as a shorthand for 'correlated.accel-mag'
# This definition may be overwritten by instruments...
alias.accel correlated.accel-mag

# Solve for pixel drifts (1/f filtering) at given timescale
forget offsets
drifts 30
[extended] drifts 300
drifts.method blocks
iteration.[3] drifts auto

# Set the nunber of iterations required
# To recover more extended emission, you can increase the number of iterations
# when using the 'extended' option. The more you iterate, the more large scale
# emission is recovered. However, beware that the larger scales will be also
# inherently noisier due to the typical 1/f-type noise interference.
rounds 6
[extended] rounds 20

# Despike with the specified method ('frames', 'features', 'absolute' or 
# 'gradual') above the critical S/N level.
despike
despike.level 100.0
despike.method neighbours
despike.flagfraction 3e-3
despike.flagcount 10
despike.framespikes 3
despike.width auto

# Default dejumping settings. Level relative to noise level, and minimum length
# in seconds, above which the jump will be re-levelled, below which flagged. 
# You can also set the time-resolution (in deconds) of de-jumping. If not set
# all frames are dejumped individually. 
dejump.level 2.0
dejump.minlength 5.0
#dejump.resolution = 0.3

# Smooth internal source generations a little to get rid of pixellization
# noise. This setting will not necessarily determine the smoothing of the
# final output map, as the setting is normally revised in the last iteration
# (see further below)...
smooth minimal

# Using lookup tables for sample -> map index can result in a significant
# increase of speed (by 30% typically). However, these tables can take up
# a lot of RAM, which may limit the reduction of large datasets. Therefore
# it is recommended to set a usage limit as a fraction of the maximum
# available memory. Values around 0.8 would be typical to allow for various
# overheads during reduction.
indexing auto
indexing.saturation 0.80

# Clip maps only to retain really bright source features, which have to
# be removed before despiking. As the despiking level is tightened, so the 
# clipping level will drop. For the final iteration the clipping is omitted
# (see further below) s.t. in the end an unbiased source map is produced.
clip 30.0

# Do not clip initially when a 'source.model' is supplied.
[source.model] forget clip

# If using a source model, do not clip. (It should not be necessary, since
# after applying the model, one should be left with faint signals only.
#[source.model] blacklist clip

# Blanking of bright sources is initially disabled, however, since 
# it may hinder despiking...
blank 30.0

# If a source model is used, also adjust the blanking level to faint signals
[source.model] blank 10.0

# Now that the brightest features have been blanked, despike more tightly, and
# follow-up with clipping and blanking at lower S/N levels....
iteration.[2] despike.level 30.0
iteration.[2] clip 10.0
iteration.[2] blank 10.0

# Continue going for fainter fluxes in the third iteration, while retaining
# clipping of non-significant features.
iteration.[3] despike.level 10.0
iteration.[3] clip 4.0

# By now the bright features should be well modeled. For fainter structures,
# switch to using maximum-likelihood estimators
#iteration.[4] estimator maximum-likelihood
iteration.[4] clip 2.0

# Once a decent enough source model is reached, disable further clipping
# and blanking, and allow unbiased modeling of the source. Extended emission
# will be recovered gradually with the iterations...
# WARNING! Failure to disable clipping AND blanking in time, may prevent the
# recovery of the extended emission. Change with this setting only if you know
# what you are doing...
[extended] iteration.[3] clip 2.0
[extended] iteration.[4] blacklist blank,despike

# Use a noise whitening filter on the unmodelled residuals.
iteration.[last-1] whiten
[extended] iteration.[90%] whiten

# Once solutions have sufficiently converged, allow the spectral noise 
# whitening filter to clean the unmodeled residuals.
# Set the critical level above white noise beyond which to apply whitening
whiten.level 2.0

# By default whitening only suppresses excessive noise. It is possible to
# configure it such that the filter also brings noise up from below the 
# inverted critical level -- thus resulting in a truly white spectrum. A
# white noise spectrum ensures that the map pixels/beams are uncorrelated.
whiten.below

# The maximum allowed power-boost to spectral channels when whitening noise
# below the mean...
whiten.below.max 2.0

# Set the frequency range (in Hz), in which the whitening filter is to measure 
# the white-noise level. By default it will use the entire spectral range
# available.
whiten.proberange *:*

# Weight each scan based on its measured map-noise (robust estimation)
#weighting.scans robust
[extended] forget weighting.scans

# Do not flag scans for unusually high nefd when reducing as 'extended'
[extended] blacklist source.nefd

# Despiking of source (per scan) above some S/N level.
forget source.despike

# Minimum redundancy per scanmap pixel
source.redundancy 2
[beammap] forget source.redundancy

# Correct map fluxes below clipping/blanking level for the filtering effect
# of auxillary models when map is iterated. When the map is not iterated, 
# the correction automatically takes place using a different method.
iteration.[last] source.correct

# Noise clip the final map, s.t. map pixels with noise more than 10-times the
# least noisy part of the map are flagged.
#noiseclip 10.0
forget noiseclip

# Clip map points that have been integrated less than the specified fraction of
# the best covered part.
iteration.[last] exposureclip 0.04

# Make completely sure that the last map generation is without clipping.
# The later clipping/blanking is disabled, the more faint extended emission
# will be filtered away... 
iteration.[last] blacklist clip,blank

# Do not smooth the final map (even if intermediates were smoothed).
[extended] smooth beam
iteration.[last] forget smooth

# Assuming that the source is at the end of the pipeline, there is no need to
# sync to time-streams in the last iteration. Instruments, or configurations
# in which source is moved forward in the pipeline 'ordering', should reset
# this...
iteration.[last] source.nosync

# Do not LSS filter the source
forget source.filter

# The filtering method (when used) -- 'convolution' or 'fft'
source.filter.type convolution

# The interpolation for the convolution filter (when used).
# Can be 'nearest', 'linear', 'quadratic' or 'cubic'
source.filter.interpolation cubic

# Additional options to beam maps...
# Process beam maps like regular maps
beammap.process

# Write individual images for every pixel
#beammap.writemaps
[beammap] blacklist exposureclip 
[beammap] forget rcp

# Specify the method for determining pointing offsets (also for beammap)
# Choose between 'peak' and 'centroid'.
pointing.method centroid

# Derive pointing only if the peak S/N exceeds a critical level
pointing.significance 6.0

# Discard the underexposed parts of the map when deriving pointing results
# This does not affect the output image in any way
pointing.exposureclip 0.25

# Use 'point' as a shorthand for determining the pointing offsets at the end.
[point] final:pointing suggest

# Additional settings for skydips...
# The binning of skydips (in arcsec)
[source.type?skydip] grid 900.0

# What parameters to fit: 'tau', 'offset', 'data2K', 'Tsky'
skydip.fit tau,offset,data2K

# Specify manually the physical sky temperature (K) to use
#skydip.Tsky 273.0

# For reducing very large datasets, i.e. what cannot be fit into memory in
# a single go, one has no option but to split the reduction into manageable
# sized chunks, and then use 'coadd' to create composite maps. Once a
# composite is made, it can be fed back into a second reduction via the
# 'source.model' key to obtain a better solution. Such manual iterating may be
# useful to get rid of negative bowls around the fainter areas, which are
# not bright enough in the individual chunks. To aid the reduction of split
# datasets, you can use the 'split' option, which disables smoothing to create
# raw maps suitable for coadding and external smoothing via 'imagetool'
[split] smooth.external

# Split reductions should not be clipped by exposure either...
[split] final:forget exposureclip

# Add the scan specific information at the end of the output FITS image. Each
# scan will contribute an extra HDU.
write.scandata 

# The above will write only some very basic information about each scan. 
# You can add more richness to the scan information (e.g. channel gains, 
# weights, flags, noise spectra and filter profiles) by enabling the 
# 'scandata.details' option
#scandata.details

# You can write PNG thumbnails together with FITS images...
write.png

# Choose which image plane to write ('flux', 'noise', 'weight', 'time' or 
# 's2n'). Default is 'flux'.
write.png.plane s2n

# Choose the PNG size (in pixels)
write.png.size 500x500

# The PNG colorscheme ('colorful', 'grayscale', 'orange' or 'blue')
write.png.color colorful

# The PNG background Hex RGB value (e.g. 0xFFFFFF), or 'transparent'
write.png.bg transparent

# Enable bicubic spline interpolation for non-pixelized, smooth, PNG output
#write.png.spline

# Some convenient aliases:
# the keys 'altaz', 'horizontal', 'radec', 'equatorial', 'ecliptic', 'galactic'
# and 'supergalactic' are defined. E.g., 
# 
# > ./crush [...] -galactic [...] 
#
# can be used to produce maps in galactic coordinates
#
alias.altaz system horizontal
alias.horizontal system horizontal
alias.equatorial system equatorial
alias.radec system equatorial
alias.ecliptic system ecliptic
alias.galactic system galactic
alias.supergalactic system supergalactic

# 'final' is a shorthand for iteration.[last]. This can be used, for example
# to specify a map smoothing at the end of reduction. On the command line
# an example of this would look like:
#
# > ./crush [...] -final:smooth=beam [...]
#
# Note, that the colon (:) is used as a separator between the alias and the
# conditional setting on the command-lines, because spaces are not allowed.
#
alias.final iteration.[last]

# Some shorthand for iteration-based settings
alias.i iteration
alias.i1 iteration.[1]
alias.i2 iteration.[2]
alias.i3 iteration.[3]

# Some aliases for better backward compatibility (esp. with minicrush)
alias.center pointing
alias.time-weighting weighting.frames
#alias.extfilter source.filter
#alias.nefd-range source.nefd
#alias.scanmap-redundancy source.redundancy
#alias.scanweighting source.weighting
#alias.scanmap-despike source.despike
#alias.relative-noise-range weighting.noiserange
#alias.rcpgains source.fixedgains


# invoke the appropriate brightness configuration when one of the brightness
# options is set...
[bright] config bright.cfg
[faint] config faint.cfg
[deep] config deep.cfg

