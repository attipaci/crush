# ===========================================================================
# CRUSH configuration for generating flatfields. 
#
# Author: Attila Kovacs <attila@submm.caltech.edu>
#
# Description:
#       This configuration helps created flatfields based on the actual 
#	detector responses to the observed source structure. Note, this
#       works only if the soruce was observed with a scan pattern, which
#       moves ALL pixels over the bright emission. (E.g. raster scans
#       on OMC-1...)    
# 
# ===========================================================================

# Activate the routine that will determine source couplings for each pixel.
source.coupling

# Specify the acceptable range of pixel couplings (source gain to common-noise
# gain ratio). Pixels outside of that range will be flagged as 'blind'.
source.coupling.range 0.1:10.0

# Iterate longer, to get a good source solution with all the relevant source
# structure
#rounds 15

# Write the flatfield data for used with the DRP pipeline.
write.flatfield

# Write the flatfield data for re-use with CRUSH, e.g. via the 'pixeldata'
# option.
write.pixeldata

# Do not use prior flat values. Derive them all from scratch...
blacklist pixeldata

# Ignore flagging
blacklist flag, flag.row, flag.mux

# Do not bias maps
blacklist clip

# Disable decorrelating on array substructures, such as bias lines, SQUID
# muxes, or detector rows. They can interfere with the derivation of robust
# flatfields.
forget biaslines, mux, rows

# Do not smooth the images in the intermediate iterations. 
forget smooth

# Do not try to fix flux jumps when determining flats. The flux jump fixing
# algorithm can interfere with the flatfield determination
#forget fixjumps

# Disable flagging pixels based on the common-noise reponse.
#blacklist array.gainrange

# Always determine flatfields for all subarrays, by never allowing to reduce
# with a subarray selection.
blacklist subarray

# Always sync the source (the coupling estimate is part of the synching).
blacklist source.nosync

